// Script para probar conexi√≥n remota desde cualquier dispositivo
// Uso: node test-external-connection.js

const { PrismaClient } = require('@prisma/client');

// Configuraci√≥n de conexi√≥n remota
const REMOTE_DATABASE_URL = "postgresql://sotram:S0tram.2025@190.159.9.80:5432/db_enruta";

async function testExternalConnection() {
  console.log('üåê Probando conexi√≥n externa a la base de datos...');
  console.log('üìç Servidor remoto: 190.159.9.80:5432');
  console.log('üóÑÔ∏è  Base de datos: db_enruta');
  console.log('‚è∞ Timestamp:', new Date().toISOString());
  
  const prisma = new PrismaClient({
    datasources: {
      db: {
        url: REMOTE_DATABASE_URL,
      },
    },
    log: ['query', 'info', 'warn', 'error'],
  });

  try {
    // Probar conexi√≥n b√°sica
    console.log('\nüì° Probando conectividad...');
    const startTime = Date.now();
    const result = await prisma.$queryRaw`SELECT 1 as test, NOW() as server_time`;
    const endTime = Date.now();
    const latency = endTime - startTime;
    
    console.log('‚úÖ Conexi√≥n exitosa:', result);
    console.log(`‚è±Ô∏è  Latencia: ${latency}ms`);
    
    // Verificar usuarios
    console.log('\nüë• Verificando usuarios...');
    const userCount = await prisma.usuario.count();
    console.log(`üìä N√∫mero de usuarios: ${userCount}`);
    
    if (userCount > 0) {
      const users = await prisma.usuario.findMany({
        select: {
          id: true,
          usuario: true,
          nombre: true,
          activo: true
        }
      });
      
      console.log('üìã Usuarios disponibles:');
      users.forEach(user => {
        console.log(`   - ${user.usuario} (${user.nombre}) - ${user.activo ? '‚úÖ Activo' : '‚ùå Inactivo'}`);
      });
    }
    
    // Verificar tablas principales
    console.log('\nüìã Verificando estructura de la base de datos...');
    const tables = await prisma.$queryRaw`
      SELECT table_name, table_type
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `;
    
    console.log(`üìä Total de tablas: ${tables.length}`);
    console.log('üìã Tablas principales:');
    const mainTables = ['Usuario', 'Conductor', 'Automovil', 'Ruta', 'Turno', 'Configuracion'];
    mainTables.forEach(tableName => {
      const table = tables.find(t => t.table_name === tableName);
      if (table) {
        console.log(`   ‚úÖ ${tableName}`);
      } else {
        console.log(`   ‚ùå ${tableName} (no encontrada)`);
      }
    });
    
    // Probar consultas de rendimiento
    console.log('\n‚ö° Probando rendimiento...');
    const performanceTests = [
      { name: 'Conteo de usuarios', query: () => prisma.usuario.count() },
      { name: 'Conteo de conductores', query: () => prisma.conductor.count() },
      { name: 'Conteo de autom√≥viles', query: () => prisma.automovil.count() },
      { name: 'Conteo de rutas', query: () => prisma.ruta.count() },
    ];
    
    for (const test of performanceTests) {
      const start = Date.now();
      const result = await test.query();
      const duration = Date.now() - start;
      console.log(`   ${test.name}: ${result} registros (${duration}ms)`);
    }
    
    console.log('\nüéâ ¬°Prueba de conexi√≥n externa completada exitosamente!');
    console.log('‚úÖ La base de datos est√° accesible desde dispositivos externos');
    console.log('‚úÖ Conexi√≥n estable y funcional');
    console.log('‚úÖ Estructura de datos correcta');
    
  } catch (error) {
    console.error('‚ùå Error en la conexi√≥n externa:', error.message);
    
    if (error.message.includes('Can\'t reach database server')) {
      console.log('\nüí° Posibles causas:');
      console.log('1. El servidor PostgreSQL no est√° configurado para conexiones externas');
      console.log('2. El firewall bloquea el puerto 5432');
      console.log('3. La IP del servidor no es accesible desde esta ubicaci√≥n');
      console.log('4. Problemas de red entre este dispositivo y el servidor');
    } else if (error.message.includes('authentication failed')) {
      console.log('\nüí° Error de autenticaci√≥n:');
      console.log('1. Verifica las credenciales de la base de datos');
      console.log('2. Verifica que el usuario tenga permisos de conexi√≥n');
    }
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar la prueba
testExternalConnection();
